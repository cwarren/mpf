require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::MobileServicesController do

  #render_views

  def mock_mobile_service(stubs={})
    mock_icon = mock("testicon");
    mock_icon.stub!(:url,"http://foo");
    mock_icon.stub!(:exists?,true);
    stubs['icon'] = mock_icon
    @mock_mobile_service ||= mock_model(MobileService, stubs).as_null_object
  end

  before(:each) do    
    # set up for logged in user
    logged_in  
  end

  describe "GET index", :focus => true do
    it "assigns all mobile_services as @mobile_services if logged in" do
      mslist = MobileService.make!(2)      
      get :index
      assigns(:mobile_services).should == mslist
    end

    it "redirects to the log in screen if not logged in" do
      logged_out
      get :index
      response.should redirect_to(admin_login_path)
    end

  end

  describe "GET show" do
    it "assigns the requested mobile_service as @mobile_service" do
      MobileService.stub(:find).with("37") { mock_mobile_service }
      get :show, :id => "37"
      assigns(:mobile_service).should be(mock_mobile_service)
    end
  end

  describe "GET new" do
    it "assigns a new mobile_service as @mobile_service" do
      MobileService.stub(:new) { mock_mobile_service }
      get :new
      assigns(:mobile_service).should be(mock_mobile_service)
    end
  end

  describe "GET edit" do
    it "assigns the requested mobile_service as @mobile_service" do
      ms = MobileService.make!
      get :edit, :id => ms.id
      assigns(:mobile_service).should == ms
      assigns(:packages_not_in).should be_empty
    end
    
    it "assigns services packages that don't include this to @packages_not_in" do
      ms = MobileService.make!(:with_2_packages)
      p = [ServicePackage.make]
      p[0].save
      get :edit, :id => ms.id
      assigns(:mobile_service).should == ms
      assigns(:packages_not_in).should == p
    end
    
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created mobile_service as @mobile_service" do
        MobileService.stub(:new).with({'these' => 'params'}) { mock_mobile_service(:save => true) }
        post :create, :mobile_service => {'these' => 'params'}
        assigns(:mobile_service).should be(mock_mobile_service)
      end

      it "redirects to the created mobile_service" do
        MobileService.stub(:new) { mock_mobile_service(:save => true) }
        post :create, :mobile_service => {}
        response.should redirect_to(admin_mobile_service_url(mock_mobile_service))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved mobile_service as @mobile_service" do
        MobileService.stub(:new).with({'these' => 'params'}) { mock_mobile_service(:save => false) }
        post :create, :mobile_service => {'these' => 'params'}
        assigns(:mobile_service).should be(mock_mobile_service)
      end

      it "re-renders the 'new' template" do
        MobileService.stub(:new) { mock_mobile_service(:save => false) }
        post :create, :mobile_service => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested mobile_service" do
        MobileService.stub(:find).with("37") { mock_mobile_service }
        mock_mobile_service.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :mobile_service => {'these' => 'params'}
      end

      it "assigns the requested mobile_service as @mobile_service" do
        MobileService.stub(:find) { mock_mobile_service(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:mobile_service).should be(mock_mobile_service)
      end

      it "redirects to the mobile_service" do
        MobileService.stub(:find) { mock_mobile_service(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(admin_mobile_service_url(mock_mobile_service))
      end
    end

    describe "with invalid params" do
      it "assigns the mobile_service as @mobile_service" do
        MobileService.stub(:find) { mock_mobile_service(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:mobile_service).should be(mock_mobile_service)
      end

      it "re-renders the 'edit' template" do
        MobileService.stub(:find) { mock_mobile_service(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested mobile_service" do
      MobileService.stub(:find).with("37") { mock_mobile_service }
      mock_mobile_service.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the mobile_services list" do
      MobileService.stub(:find) { mock_mobile_service }
      delete :destroy, :id => "1"
      response.should redirect_to(admin_mobile_services_url)
    end
  end
  
  
  #-------------------------------------------------------------------

  describe "POST add service" do
    it "adds the given package to the given service" do
      ms = MobileService.make!
      sp = ServicePackage.make!
      
      xhr :post, :add_package, :id => ms.id, :package_id => sp.id

      response.should be_success
      ms.service_packages.reload
      ms.service_packages[0].should == sp
    end
    
    context "when the package is already in the service" do
      it "does nothing" do
        ms = MobileService.make!(:with_2_packages)
        sp1 = ms.service_packages[0]
        sp2 = ms.service_packages[1]

        xhr :post, :add_package, :id => ms.id, :package_id => sp1.id

        response.should be_success
        ms.service_packages.reload
        ms.service_packages.length.should == 2
        ms.service_packages[0].should ==(sp1)
        ms.service_packages[1].should ==(sp2)
      end
    end

  end
  

  describe "POST remove service" do
    it "removes the given package from the given service" do
      ms = MobileService.make!(:with_2_packages)
      sp1 = ms.service_packages[0]
      sp2 = ms.service_packages[1]

      xhr :post, :remove_package, :id => ms.id, :package_id => sp1.id

      response.should be_success # NOTE: this passes even when the remove action is undefined....?

      ms.service_packages.reload

      ms.service_packages.length.should == 1
      ms.service_packages[0].should ==(sp2)
    end

    context "when the package is not in the service" do
      it "does nothing" do
        ms = MobileService.make(:with_2_packages)
        sp = ServicePackage.make(:with_2_services)
        ms.save
        sp1 = ms.service_packages[0]
        sp2 = ms.service_packages[1]
        sp3 = ServicePackage.make
        sp3.save
        
        xhr :post, :remove_package, :id => ms.id, :package_id => sp3.id
        
        response.should be_success

        ms.service_packages.reload
        ms.service_packages.length.should == 2
        ms.service_packages[0].should ==(sp1)
        ms.service_packages[1].should ==(sp2)
      end
    end

  end

end
